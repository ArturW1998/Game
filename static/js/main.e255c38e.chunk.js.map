{"version":3,"sources":["serviceWorker.js","components/TopNumber.js","components/Display.js","utils/helpers.js","components/Target.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TopNumber","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","highest","inherits","createClass","key","value","_ref","nextState","game","background","document","body","style","propsGame","props","_ref2","number","setState","react_default","a","createElement","Component","defaultProps","fontSize","innerWidth","color","position","top","Display","random","min","max","r","Math","floor","clone","obj","newObj","prop","hasOwnProperty","Target","visibility","rand","left","cursor","className","fieldStyle","width","bottom","height","App","targets","latestClick","intervals","createTarget","ms","push","setInterval","stateTargets","num","hitTarget","_ref$target","target","innerText","parseInt","toFixed","startGame","endGame","forEach","int","clearInterval","prevProps","_this$state","buttonStyle","display","targetItems","Target_Target","TopNumber_TopNumber","Display_Display","onClick","ReactDOM","render","containers_App","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e255c38e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n          /* eslint-enable */\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable no-console */\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n      /* eslint-enable */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n      /* eslint-enable */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst yellow = 'rgb(255, 215, 18)';\nconst white = 'rgb(255, 255, 255)';\n\nexport class TopNumber extends Component {\n  state = { highest: 0 };\n\n  UNSAFE_componentWillUpdate({ game }, nextState) {\n    const { background } = document.body.style;\n    const { highest } = this.state;\n    const { game: propsGame } = this.props;\n\n    if (background !== yellow && highest >= 950 * 1000) {\n      document.body.style.background = yellow;\n    } else if (!propsGame && game) {\n      document.body.style.background = white;\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps({ number }) {\n    const { highest } = this.state;\n\n    if (number > highest) {\n      this.setState({\n        highest: number\n      });\n    }\n  }\n\n  render() {\n    const { highest } = this.state;\n\n    return <h1>Top Number: {highest}</h1>;\n  }\n}\n\nTopNumber.propTypes = {\n  number: PropTypes.number,\n  game: PropTypes.bool\n};\n\nTopNumber.defaultProps = {\n  number: 0,\n  game: false\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst fontSize = window.innerWidth < 450 ? 60 : 110;\n\nconst style = {\n  fontSize,\n  color: 'lightgrey',\n  position: 'absolute',\n  top: '30%'\n};\n\nexport const Display = ({ number }) => <div style={style}>{number}</div>;\n\nDisplay.propTypes = {\n  number: PropTypes.number.isRequired\n};\n\nDisplay.defaultProps = {\n  number: 0\n};\n","export const random = (min, max) => {\n  const r = Math.random();\n  return Math.floor(r * (max - min) + min);\n};\n\nexport const exists = x => {\n  if (x != null) return x;\n};\n\nexport const clone = obj => {\n  const newObj = {};\n  for (const prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      newObj[prop] = obj[prop];\n    }\n  }\n  return newObj;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { random } from '../utils/helpers';\n\nexport class Target extends Component {\n  shouldComponentUpdate({ number }, nextState) {\n    const { number: digit } = this.props;\n\n    return digit !== number;\n  }\n\n  render() {\n    const { number } = this.props;\n    const visibility = number ? 'visible' : 'hidden';\n    const rand = `${random(0, 100)}%`;\n\n    const style = {\n      position: 'absolute',\n      left: rand,\n      top: rand,\n      fontSize: 40,\n      cursor: 'pointer',\n      visibility\n    };\n\n    return (\n      <span style={style} className=\"target\">\n        {number}\n      </span>\n    );\n  }\n}\n\nTarget.propTypes = {\n  number: PropTypes.number.isRequired\n};\n\nTarget.defaultProps = {\n  number: 0\n};\n","import React, { Component } from 'react';\n\nimport { TopNumber } from '../components/TopNumber';\nimport { Display } from '../components/Display';\nimport { Target } from '../components/Target';\nimport { random, clone } from '../utils/helpers';\n\nimport './css/App.css';\n\nconst width = window.innerWidth < 450 ? 150 : 250;\n\nconst fieldStyle = {\n  position: 'absolute',\n  width,\n  bottom: 60,\n  left: 10,\n  height: '60%'\n};\n\nclass App extends Component {\n  state = {\n    game: false,\n    targets: {},\n    latestClick: 0\n  };\n\n  intervals = null;\n\n  componentDidUpdate(prevProps, { latestClick }) {\n    const { latestClick: stateLatestClick } = this.state;\n\n    if (stateLatestClick < latestClick) {\n      this.endGame();\n    }\n  }\n\n  createTarget = (key, ms) => {\n    ms = ms || random(500, 2000);\n\n    this.intervals.push(\n      setInterval(() => {\n        const { targets: stateTargets } = this.state;\n        const targets = clone(stateTargets);\n        const num = random(1, 1000 * 1000);\n        targets[key] = targets[key] !== 0 ? 0 : num;\n        this.setState({ targets });\n      }, ms)\n    );\n  };\n\n  hitTarget = ({ target: { className, innerText } }) => {\n    if (className !== 'target') return;\n    const num = parseInt(innerText);\n    const { targets } = this.state;\n\n    /* eslint-disable no-unused-vars */\n    for (const target in targets) {\n      const key = Math.random().toFixed(4);\n      this.createTarget(key);\n    }\n    /* eslint-enable */\n\n    this.setState({ latestClick: num });\n  };\n\n  startGame = () => {\n    this.createTarget('first', 750);\n    this.setState({\n      game: true\n    });\n  };\n\n  endGame = () => {\n    this.intervals.forEach(int => {\n      clearInterval(int);\n    });\n    this.intervals = [];\n    this.setState({\n      game: false,\n      targets: {},\n      latestClick: 0\n    });\n  };\n\n  UNSAFE_componentWillMount() {\n    this.intervals = [];\n  }\n\n  render() {\n    const { game, latestClick, targets } = this.state;\n    const buttonStyle = {\n      display: game ? 'none' : 'inline-block'\n    };\n    const targetItems = [];\n    for (const key in targets) {\n      targetItems.push(<Target number={targets[key]} key={key} />);\n    }\n\n    return (\n      <div>\n        <TopNumber number={latestClick} game={game} />\n        <Display number={latestClick} />\n        <button onClick={this.startGame} style={buttonStyle}>\n          New Game\n        </button>\n        <div style={fieldStyle} onClick={this.hitTarget}>\n          {targetItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\nserviceWorker.register();\n"],"sourceRoot":""}