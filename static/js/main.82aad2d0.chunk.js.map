{"version":3,"sources":["serviceWorker.js","components/TopNumber.js","components/Display.js","utils/helpers.js","components/Target.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","TopNumber","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","highest","inherits","createClass","key","value","nextProps","nextState","document","body","style","background","props","game","number","setState","react_default","a","createElement","Component","fontSize","innerWidth","color","position","top","Display","_ref","random","min","max","r","Math","floor","clone","obj","newObj","prop","hasOwnProperty","Target","visibility","rand","left","cursor","className","fieldStyle","width","bottom","height","App","targets","latestClick","intervals","createTarget","ms","push","setInterval","num","hitTarget","e","_e$target","target","innerText","parseInt","toFixed","startGame","endGame","forEach","int","clearInterval","prevProps","prevState","_this$state","buttonStyle","display","targetItems","Target_Target","TopNumber_TopNumber","Display_Display","onClick","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82aad2d0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst yellow = 'rgb(255, 215, 18)';\nconst white = 'rgb(255, 255, 255)';\n\nexport class TopNumber extends Component {\n  state = { 'highest': 0 };\n\n  componentWillUpdate(nextProps, nextState) {\n    if (document.body.style.background != yellow && this.state.highest >= 950 * 1000) {\n      document.body.style.background = yellow;\n    } else if (!this.props.game && nextProps.game) {\n      document.body.style.background = white;\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.number > this.state.highest) {\n      this.setState({\n        highest: nextProps.number\n      });\n    }\n  }\n\n  render() {\n    return (\n      <h1>\n        Top Number: {this.state.highest}\n      </h1>\n    );\n  }\n}\n\nTopNumber.propTypes = {\n  number: PropTypes.number,\n  game: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst fontSize = window.innerWidth < 450 ? 60 : 110;\n\nconst style = {\n\tfontSize,\n\tcolor: 'lightgrey',\n\tposition: 'absolute',\n\ttop: '30%'\n};\n\nexport const Display = ({ number }) => {\n\treturn (\n\t\t<div style={style}>\n\t\t\t{number}\n\t\t</div>\n\t);\n}\n\nDisplay.propTypes = {\n\tnumber: PropTypes.number.isRequired\n};\n","export let random = (min, max) => {\n\tlet r = Math.random();\n\treturn Math.floor(r * (max - min) + min);\n};\n\nexport let exists = (x) => {\n\tif (x != null) return x;\n}\n\nexport let clone = (obj) => {\n\tlet newObj = {};\n\tfor (let prop in obj) {\n\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\tnewObj[prop] = obj[prop];\n\t\t}\n\t}\n\treturn newObj;\n}\n","import React, { Component } from 'react';\nimport { random } from '../utils/helpers';\nimport PropTypes from 'prop-types';\n\nexport class Target extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.number != nextProps.number;\n  }\n\n  render() {\n    const { number } = this.props;\n    let visibility = number ? 'visible' : 'hidden';\n    const rand = `${random(0, 100)}%`;\n\n    let style = {\n      position: 'absolute',\n      left: rand,\n      top: rand,\n      fontSize: 40,\n      cursor: 'pointer',\n      visibility: visibility\n    };\n\n    return (\n      <span style={style} className=\"target\">\n        {number}\n      </span>\n    )\n  }\n}\n\nTarget.propTypes = {\n  number: PropTypes.number.isRequired\n};\n","import React, { Component } from 'react';\nimport { TopNumber } from '../components/TopNumber';\nimport { Display } from '../components/Display';\nimport { Target } from '../components/Target';\nimport { random, clone } from '../utils/helpers';\nimport './css/App.css';\n\nconst width = window.innerWidth < 450 ? 150 : 250;\n\nconst fieldStyle = {\n  position: 'absolute',\n  width,\n  bottom: 60,\n  left: 10,\n  height: '60%',\n};\n\nclass App extends Component {\n\n  state = {\n    game: false,\n    targets: {},\n    latestClick: 0\n  };\n\n  intervals = null;\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.latestClick < prevState.latestClick) {\n      this.endGame();\n    }\n  }\n\n  createTarget = (key, ms) => {\n    ms = ms || random(500, 2000);\n    this.intervals.push(setInterval(() => {\n      let targets = clone(this.state.targets);\n      let num = random(1, 1000 * 1000);\n      targets[key] = targets[key] != 0 ? 0 : num;\n      this.setState({ targets: targets });\n    }, ms));\n  }\n\n  hitTarget = e => {\n    const { className, innerText } = e.target;\n\n    if (className != 'target') return;\n    let num = parseInt(innerText);\n    for (let target in this.state.targets) {\n      let key = Math.random().toFixed(4);\n      this.createTarget(key);\n    }\n    this.setState({ latestClick: num });\n  }\n\n  startGame = () => {\n    this.createTarget('first', 750);\n    this.setState({\n      game: true\n    });\n  }\n\n  endGame = () => {\n    this.intervals.forEach((int) => {\n      clearInterval(int);\n    });\n    this.intervals = [];\n    this.setState({\n      game: false,\n      targets: {},\n      latestClick: 0\n    });\n  }\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  render() {\n    const { game, latestClick, targets } = this.state;\n    let buttonStyle = {\n      display: game ? 'none' : 'inline-block'\n    };\n    let targetItems = [];\n    for (let key in targets) {\n      targetItems.push(\n        <Target\n          number={targets[key]}\n          key={key} />\n      );\n    }\n    return (\n      <div>\n        <TopNumber number={latestClick} game={game} />\n        <Display number={latestClick} />\n        <button onClick={this.startGame} style={buttonStyle}>\n          New Game\n        </button>\n        <div style={fieldStyle} onClick={this.hitTarget}>\n          {targetItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}